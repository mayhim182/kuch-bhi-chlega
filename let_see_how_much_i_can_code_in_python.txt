#code for whether a loop exists in ll or not
def detectLoop(self, head):
        first=head
        second=head
        while(first and second and first.next):
            first=first.next.next
            second=second.next
            if(first==second):
                return True
        return False
	
#code for count of nodes in loop in ll 	
def countNodesinLoop(head):
    first=head
    second=head
    count=0
    while(first and second and first.next):
        first=first.next.next
        second=second.next
        if(first==second):
            second=second.next
            count=count+1
            while(second!=first):
                second=second.next
                count=count+1
            return count
    return 0
	
#code to find the first node in ll loop
def findFirstNode(self, head):
        first=head
        second=head
        temp=head
        while(first and second and first.next):
            first=first.next.next
            second=second.next
            if(first==second):
                while(temp!=first):
                    temp=temp.next
                    first=first.next
                return temp.data
        return -1

#code to determine whether ll in cll or not
def isCircular(head):
    first=head
    second=head
    temp=head
    while(first and second and first.next):
        first=first.next.next
        second=second.next
        if(first==second):
            while(temp!=first):
                temp=temp.next
                first=first.next
            if(temp==head):
                return True
    return False
	
#remove loop in ll if it exists
def removeLoop(self, head):
        d={}
        prev=Node(0)
        curr=head
        while(curr):
            if curr in d:
                prev.next=None
                return head
            else:
                d[curr]=True
                prev=curr
                curr=curr.next
        return head

#code for searching a particular key in ll
def searchKey(self, n, head, key):
        curr=head
        while(n and curr):
            n=n-1
            if(curr.data==key):
                return 1
            curr=curr.next
        return 0
		
#finding middle node of ll
def findMid(self, head):
        if head==None:
            return -1
        if head.next==None:
            return head.data
        first=head
        second=head
        while(first and first.next):
            first=first.next.next
            second=second.next
        return second.data
		
#finding whether the linked list is palindrome or not
def isPalindrome(self, head):
	l=[]
	curr=head
	while(curr):
		l.append(curr.data)
		curr=curr.next
	for i in range(0,(n)//2):
		if l[i]!=l[n-i-1]:
			return 0
	return 1

	
#insert at head of linked list
def insertAtBegining(self,head,x):
        new_node=Node(x)
        new_node.next=head
        head=new_node
        return head
	
#insert at the end of linked list
def insertAtEnd(self,head,x):
        new_node=Node(x)
        curr=head
        if(head==None):
            head=new_node
            return head
        while(curr.next):
            curr=curr.next
        curr.next=new_node
        return head
		
#insert at a given position in linked list:
def insertAtPos(self,head,x,b):
        new_node=Node(x)
        curr=head
        if(head==None and b>1):
            return -1
		if(head==None and b==1):
            head=new_node
			return head
        while(b-1):
		    b=b-1
            curr=curr.next
		new_node.next=curr.next
		curr=new_node
        return head
		
#delete the head of the linked list:
def deleteAthead(self,head):
        if(head==None):
		    return -1
		curr=head.next
		delete head
		return curr
	
#delete the tail of the linked list:
def deleteAtTail(self,head):
        if(head==None):
		    return -1
		if(head.next==None):
		    delete head
			return None
		curr=head
		while(curr.next.next):
		    curr=curr.next
		temp=curr.next
		delete temp
		curr.next=None
		return head
