February 11 2024
Q. https://www.geeksforgeeks.org/problems/remove-loop-in-linked-list/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

    void removeLoop(Node* fast, Node* head){
        Node* ptr = head;
        while(head!=fast->next){
            fast = fast->next;
            head = head->next;
        }
        
        fast->next = NULL;
    }
    
    int detectLoop(Node *head){
        if(!head || !head->next) return 0;
        Node* slow = head;
        Node* fast = head->next;
        while(slow && fast && fast->next){
            if(fast == slow) {
                removeLoop(fast, head);
                return 1;
            }
            fast = fast->next->next;
            slow = slow->next;
        }
        return 0;
    }
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        detectLoop(head);
    }

Q. https://www.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

  int isPalindrome(string &s){
        int l = 0;
        int r = s.size()-1;
        while(l<r){
            if(s[l++]!=s[r--]) return 0;
        }
        return 1;
    }
    
    bool isPalindrome(Node *head)
    {
     string s = "";
     while(head){
         s+=(head->data-'0');
         head = head->next;
     }
     return isPalindrome(s);
    }

Q. middle node
https://www.geeksforgeeks.org/problems/finding-middle-element-in-a-linked-list/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

int getMiddle(Node *head)
    {
        if(!head->next) return head->data;
         //in case of single node middle bhi wahi
        Node* slow = head;
        Node* fast = head;
        while(fast && fast->next){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow->data;
    }

Q. 
https://www.geeksforgeeks.org/problems/remove-loop-in-linked-list/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

void removeLoop(Node* head,Node* fast){
        while(fast->next!=head){
            head = head->next;
            fast = fast->next;
        }
        fast ->next = NULL;
    }
    
    void detectLoop(Node* ptr){
        
        if(!ptr || !ptr->next) return ;
        
        Node* slow = ptr;
        Node* fast = ptr->next;
        
        while(slow && fast && fast->next){
            if(slow==fast){
                removeLoop(ptr,fast);
                return ;
            }
            slow = slow->next;
            fast = fast->next->next;
        }
    }
    
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        detectLoop(head);
    }

Q. Find beginning of loop

class Solution
{
    public:
    Node* detectLoop(Node* ptr){
    
    if(!ptr || !ptr->next) return 0;
    
    Node* slow = ptr;
    Node* fast = ptr->next;
    while(slow && fast && fast->next){
        if(slow==fast) return slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    return NULL; 
}
     //Function to find first node if the linked list has a loop.
    int findFirstNode(Node* head)
    {
        if(!head || !head->next) return -1; //assuming no self loop 
        Node* ptr = head;
        Node* matchFound = detectLoop(ptr);
        if(!matchFound) return -1; //No match
        matchFound = matchFound->next;
       
        while(head && matchFound && head!=matchFound){
            head = head->next;
            matchFound = matchFound->next;
        }
        return matchFound->data;
    }
};

Q. Circular or not
https://www.geeksforgeeks.org/problems/circular-linked-list/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

Node* detectLoop(Node* ptr){
    
    if(!ptr || !ptr->next) return 0;
    
    Node* slow = ptr;
    Node* fast = ptr->next;
    while(slow && fast && fast->next){
        if(slow==fast) return slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    return NULL; 
}

bool isCircular(Node *head)
{
//   if(!head) return 0;
//   Node* ptr = head;
//   ptr = head->next;
//   while(ptr){
//       if(ptr == head) return 1;
//       ptr = ptr->next;
//   }
//   return 0;//Otherwise no loop or cycle

//Alternate approach
 if(!head) return 0;
    Node* ptr = head;
    Node* match = detectLoop(ptr);
if(!match) return 0;
    match = match->next;
    while(head && match && match != head){
        head = head->next;
        match = match->next;
    }
return head==match;
}

bool isCircular(Node *head)
{
   if(!head) return 0;
   Node* ptr = head;
   ptr = head->next;
   while(ptr){
       if(ptr == head) return 1;
       ptr = ptr->next;
   }
   return 0;//Otherwise no loop or cycle
}


Q. https://www.geeksforgeeks.org/problems/find-length-of-loop/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

Node* detectLoop(Node* ptr){
    
    if(!ptr || !ptr->next) return 0;
    
    Node* slow = ptr;
    Node* fast = ptr->next;
    while(slow && fast && fast->next){
        if(slow==fast) return slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    return NULL; 
}

int countNodesinLoop(struct Node *head)
{
   Node* ptr = head;
   Node* match = detectLoop(ptr);
   if(!match) return 0;  //Loop of length 0;
   Node* matchCopy = match;
   matchCopy = matchCopy->next;
   int count = 1;
   while(matchCopy!=match){
       matchCopy = matchCopy->next;
       count++;
   }
   return count;
}

Q. https://www.geeksforgeeks.org/problems/detect-loop-in-linked-list/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab

bool detectLoop(Node* head)
    {
        if(!head || !head->next) return false;
        
        Node* slow = head;
        Node* fast = head->next;
        while(slow && fast && fast->next){
            if(fast == slow) return 1;
            slow = slow -> next;
            fast = fast ->next ->next;
        }
        
        return 0;
    }

Q. https://www.geeksforgeeks.org/problems/recamans-sequence4856/1
    vector<int> recamanSequence(int n){
        //BRUTE FORCE
        unordered_map<int,int> mp;
        vector<int> ans;
        int l = 0;
        int a = 0;
    
        while(l<n){
            int temp = a - l;
            if(temp>0 && mp.find(temp)==mp.end()){
                mp[temp]++;
                ans.push_back(temp);
            }
            else{
                temp = a+l;
                mp[temp]++; //avoiding an extra if block by using space
                ans.push_back(temp);
            }
            a = temp;
            l++;
        }
        
        return ans;
    }

Q.https://www.geeksforgeeks.org/problems/recursive-sequence1611/1
    const long long mod = 1e9+7;
    
    long long sequence(int n){
        // BRUTE FORCE
        long long ans = 0;int multiplier = 1;
        for(int i=1;i<=n;i++){
          int temp=i;
          long long tempSum = 1;
          while(temp--){
              tempSum = (tempSum*multiplier)%mod;
              multiplier++;
          }
          ans = (ans%mod+tempSum%mod)%mod;
        }
        
        return ans;
    }

Q. https://www.geeksforgeeks.org/problems/linked-list-insertion-1587115620/0


    Node *insertAtBegining(Node *head, int x) {
       // Your code here
       Node* temp = new Node(x);
       if(!head) return temp;
       temp->next = head;
       head = temp;
       return head;
    }
    
    
    //Function to insert a node at the end of the linked list.
    Node *insertAtEnd(Node *head, int x)  {
       if(!head) return new Node(x);
       Node* ptr = head;
       while(head->next){
           head = head->next;
       }
       Node* temp = new Node(x);//create a node with data
       head->next = temp;
       return ptr;
    }

Q.https://www.geeksforgeeks.org/problems/delete-a-node-in-single-linked-list/1?page=1&category=Linked%20List&sortBy=submissions


Node* deleteNode(Node *head,int x)
{
    Node* ptr = head;
    if(!head) return head;
    if(x==1){
        ptr = ptr->next;
    }
    while(x>2 && head){
        head = head->next;
        x--;
    }
    if(head && head->next){
        head->next = head->next->next;
    }
    return ptr;
}